---
import '../styles/global.css';

export interface Props {
  title: string;
  description?: string;
}

const { title, description = "WhitePuzzle - Digital Consultancy & App Development" } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    
    <!-- Custom Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
  </head>
  <body class="font-sans overflow-x-hidden">
    <!-- Loading Screen -->
    <div id="loading" class="fixed inset-0 bg-white flex items-center justify-center z-50 transition-opacity duration-500">
      <div class="w-12 h-12 border-3 border-gray-200 border-t-primary-500 rounded-full animate-spin"></div>
    </div>
    
    <slot />
    
    <script>
      // Loading animation
      window.addEventListener('load', () => {
        const loading = document.getElementById('loading');
        if (loading) {
          loading.style.opacity = '0';
          setTimeout(() => {
            loading.style.display = 'none';
          }, 500);
        }
      });

      // Header scroll effect
      const header = document.getElementById('header');
      if (header) {
        window.addEventListener('scroll', () => {
          if (window.scrollY > 100) {
            header.classList.add('shadow-lg');
          } else {
            header.classList.remove('shadow-lg');
          }
        });
      }

      // Mobile menu toggle
      const mobileMenu = document.getElementById('mobileMenu');
      const navLinks = document.getElementById('navLinks');
      
      if (mobileMenu && navLinks) {
        mobileMenu.addEventListener('click', () => {
          navLinks.classList.toggle('hidden');
        });
      }

      // Smooth scrolling for anchor links
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
          e.preventDefault();
          const target = document.querySelector(this.getAttribute('href'));
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        });
      });

      // Intersection Observer for animations
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate-slide-up');
          }
        });
      }, observerOptions);

      // Observe elements with animation class
      document.querySelectorAll('.animate-on-scroll').forEach(el => {
        observer.observe(el);
      });
    </script>
  </body>
</html>